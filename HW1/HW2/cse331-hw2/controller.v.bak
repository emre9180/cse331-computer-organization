module controller(
	input	reset,
	input	CLK,
	input p0,
	output reg write,
	output reg shift,
	output reg add
);




localparam 	S0 = 3'b000,
				S1 = 3'b001,
				S2 = 3'b010,
				S3 = 3'b011,
				S4 = 3'b100;
				
reg	[1:0] current_state;
reg	[1:0] next_state = S1;


integer counter = 0;

//State Register
always @(posedge CLK)
	begin
	if(reset)
		current_state <= S0;
	else
		current_state <= next_state;
	end

//Next State Logic
always @(*)
	begin
		next_state = S0;
		case(current_state)
		
				S0:
					begin
					end
				
				S1:
					begin
					if((p0==1))
						next_state = S2;
					else
						next_state = S3;
					end
					
				
				S2:
					begin
						next_state = S3;
					end
					
				
				S3:
					begin
						next_state = S4;
					end
					
				
				S4:
					begin
					
					if(counter==32)
						next_state = S0;
					else
						next_state = S1;
						counter = counter +1;
						
					end
					
				
				
			endcase
	end

//Outputs
always @(*)
		begin
			write 	= 1'b0;
			shift 	= 1'b0;
			add 		= 1'b0;

			case(current_state)
				
				S0:
					begin
					write = 1'b0;
					shift = 1'b0;
					add = 1'b0;
					end
				S1:
					begin
					write = 1'b1;
					shift = 1'b0;
					add = 1'b1;
					end
								
				
				S2:
					begin
					write = 1'b0;
					shift = 1'b1;
					add = 1'b0;
					end
					
				
				S3:
					begin	
					write = 1'b1;
					shift = 1'b0;
					add = 1'b0;
					end
			
			endcase
			
		end				


endmodule
